
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+3 (git sha1 a53032104, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `design_prep.ys' --

1. Executing RTLIL frontend.
Input filename: design.il

2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module topmsb_1.
Found 0 SCCs in module top_1.
Found 0 SCCs in module proofcombgood.
Found 0 SCCs in module goodbranch.
Found 0 SCCs in module bug_eval.
Found 0 SCCs in module badbranch.
Found 0 SCCs.

3. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

5. Executing CLK2FFLOGIC pass (convert clocked FFs to generic $ff cells).
Replacing topmsb_1.$procdff$54 ($dff): CLK=\clk, D=\w, Q=\y
Replacing proofcombgood.$procdff$53 ($adff): CLK=\clk, D=$0$formal$proofcombgood.v:29$18_EN[0:0]$21, Q=$formal$proofcombgood.v:29$18_EN
Replacing proofcombgood.$procdff$52 ($adff): CLK=\clk, D=$0$formal$proofcombgood.v:29$18_CHECK[0:0]$20, Q=$formal$proofcombgood.v:29$18_CHECK
Replacing proofcombgood.$procdff$51 ($adff): CLK=\clk, D=1'0, Q=\first_cycle

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \topmsb_1..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \badbranch..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

7. Executing FORMALFF pass.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..

9. Executing CHECK pass (checking for obvious problems).
Checking module badbranch...
Checking module bug_eval...
Warning: multiple conflicting drivers for bug_eval.\a_out [4]:
    port out[4] of cell goodbranch_instance (goodbranch)
    module input a_out[4]
Warning: multiple conflicting drivers for bug_eval.\a_out [3]:
    port out[3] of cell goodbranch_instance (goodbranch)
    module input a_out[3]
Warning: multiple conflicting drivers for bug_eval.\a_out [2]:
    port out[2] of cell goodbranch_instance (goodbranch)
    module input a_out[2]
Warning: multiple conflicting drivers for bug_eval.\a_out [1]:
    port out[1] of cell goodbranch_instance (goodbranch)
    module input a_out[1]
Warning: multiple conflicting drivers for bug_eval.\a_out [0]:
    port out[0] of cell goodbranch_instance (goodbranch)
    module input a_out[0]
Warning: multiple conflicting drivers for bug_eval.\b_out [4]:
    port out[4] of cell badbranch_instance (badbranch)
    module input b_out[4]
Warning: multiple conflicting drivers for bug_eval.\b_out [3]:
    port out[3] of cell badbranch_instance (badbranch)
    module input b_out[3]
Warning: multiple conflicting drivers for bug_eval.\b_out [2]:
    port out[2] of cell badbranch_instance (badbranch)
    module input b_out[2]
Warning: multiple conflicting drivers for bug_eval.\b_out [1]:
    port out[1] of cell badbranch_instance (badbranch)
    module input b_out[1]
Warning: multiple conflicting drivers for bug_eval.\b_out [0]:
    port out[0] of cell badbranch_instance (badbranch)
    module input b_out[0]
Checking module goodbranch...
Checking module proofcombgood...
Checking module top_1...
Checking module topmsb_1...
Found and reported 10 problems.

10. Executing SETUNDEF pass (replace undef values with defined constants).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
<suppressed ~18 debug messages>
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 6 cells.

11.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$clk2fflogic.cc:95:sample_data$100 ($ff) from module proofcombgood.

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

11.5. Rerunning OPT passes. (Removed registers in this run.)

11.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

11.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 0 cells.

11.8. Executing OPT_DFF pass (perform DFF optimizations).

11.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..

11.10. Finished fast OPT passes.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

13. Executing RTLIL backend.
Output filename: ../model/design_prep.il

Warnings: 10 unique messages, 10 total
End of script. Logfile hash: 8fdca345e6, CPU: user 0.00s system 0.03s, MEM: 11.36 MB peak
Yosys 0.36+3 (git sha1 a53032104, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 22% 5x opt_clean (0 sec), 15% 2x opt_expr (0 sec), ...
