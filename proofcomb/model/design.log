
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+3 (git sha1 a53032104, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: bug_eval_combined.v
Parsing formal Verilog input from `bug_eval_combined.v' to AST representation.
Generating RTLIL representation for module `\top_1'.
Generating RTLIL representation for module `\topmsb_1'.
Generating RTLIL representation for module `\goodbranch'.
Generating RTLIL representation for module `\badbranch'.
Generating RTLIL representation for module `\bug_eval'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: proofcombgood.v
Parsing formal Verilog input from `proofcombgood.v' to AST representation.
Generating RTLIL representation for module `\proofcombgood'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \proofcombgood
Used module:     \goodbranch
Used module:     \bug_eval
Used module:         \badbranch
Used module:         \topmsb_1
Used module:         \top_1

3.1.2. Analyzing design hierarchy..
Top module:  \proofcombgood
Used module:     \goodbranch
Used module:     \bug_eval
Used module:         \badbranch
Used module:         \topmsb_1
Used module:         \top_1
Removed 0 unused modules.
Module proofcombgood directly or indirectly contains formal properties -> setting "keep" attribute.
Mapping positional arguments of cell bug_eval.badbranch_instance (badbranch).
Mapping positional arguments of cell bug_eval.goodbranch_instance (goodbranch).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$proofcombgood.v:15$14 in module proofcombgood.
Marked 1 switch rules as full_case in process $proc$bug_eval_combined.v:60$7 in module bug_eval.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\proofcombgood.$proc$proofcombgood.v:0$22'.
  Set init value: $formal$proofcombgood.v:23$13_EN = 1'0
Found init rule in `\topmsb_1.$proc$syn_wrongmsb.v:9$4'.
  Set init value: \y = 1'0

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\proofcombgood.$proc$proofcombgood.v:15$14'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\proofcombgood.$proc$proofcombgood.v:0$22'.
Creating decoders for process `\proofcombgood.$proc$proofcombgood.v:15$14'.
     1/3: $0$formal$proofcombgood.v:23$13_EN[0:0]$16
     2/3: $0$formal$proofcombgood.v:23$13_CHECK[0:0]$15
     3/3: $0\first_cycle[0:0]
Creating decoders for process `\bug_eval.$proc$bug_eval_combined.v:60$7'.
     1/1: $1\result[4:0]
Creating decoders for process `\topmsb_1.$proc$syn_wrongmsb.v:9$4'.
Creating decoders for process `\topmsb_1.$proc$syn_wrongmsb.v:10$3'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\bug_eval.\result' from process `\bug_eval.$proc$bug_eval_combined.v:60$7'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\proofcombgood.\first_cycle' using process `\proofcombgood.$proc$proofcombgood.v:15$14'.
  created $adff cell `$procdff$40' with positive edge clock and positive level reset.
Creating register for signal `\proofcombgood.$formal$proofcombgood.v:23$13_CHECK' using process `\proofcombgood.$proc$proofcombgood.v:15$14'.
  created $adff cell `$procdff$41' with positive edge clock and positive level reset.
Creating register for signal `\proofcombgood.$formal$proofcombgood.v:23$13_EN' using process `\proofcombgood.$proc$proofcombgood.v:15$14'.
  created $adff cell `$procdff$42' with positive edge clock and positive level reset.
Creating register for signal `\topmsb_1.\y' using process `\topmsb_1.$proc$syn_wrongmsb.v:10$3'.
  created $dff cell `$procdff$43' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `proofcombgood.$proc$proofcombgood.v:0$22'.
Found and cleaned up 2 empty switches in `\proofcombgood.$proc$proofcombgood.v:15$14'.
Removing empty process `proofcombgood.$proc$proofcombgood.v:15$14'.
Found and cleaned up 1 empty switch in `\bug_eval.$proc$bug_eval_combined.v:60$7'.
Removing empty process `bug_eval.$proc$bug_eval_combined.v:60$7'.
Removing empty process `topmsb_1.$proc$syn_wrongmsb.v:9$4'.
Removing empty process `topmsb_1.$proc$syn_wrongmsb.v:10$3'.
Cleaned up 3 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module proofcombgood.
Optimizing module bug_eval.
<suppressed ~4 debug messages>
Optimizing module badbranch.
Optimizing module goodbranch.
Optimizing module topmsb_1.
Optimizing module top_1.

3.3. Executing FUTURE pass.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module proofcombgood.
Optimizing module bug_eval.
Optimizing module badbranch.
Optimizing module goodbranch.
Optimizing module topmsb_1.
Optimizing module top_1.

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \topmsb_1..
Finding unused cells or wires in module \top_1..
Removed 0 unused cells and 23 unused wires.
<suppressed ~8 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
Checking module badbranch...
Checking module bug_eval...
Warning: Drivers conflicting with a constant 1'0 driver:
    module input a_num1[1]
    module input a_num1[2]
    module input a_num1[3]
    module input a_num2[0]
    module input a_num2[2]
    module input a_num2[3]
    module input b_num1[0]
    module input b_num1[1]
    module input b_num1[3]
    module input b_num2[0]
    module input b_num2[1]
    module input b_num2[2]
Warning: Drivers conflicting with a constant 1'1 driver:
    module input a_num1[0]
    module input a_num2[1]
    module input b_num1[2]
    module input b_num2[3]
Warning: multiple conflicting drivers for bug_eval.\a_out [4]:
    port out[4] of cell goodbranch_instance (goodbranch)
    module input a_out[4]
Warning: multiple conflicting drivers for bug_eval.\a_out [3]:
    port out[3] of cell goodbranch_instance (goodbranch)
    module input a_out[3]
Warning: multiple conflicting drivers for bug_eval.\a_out [2]:
    port out[2] of cell goodbranch_instance (goodbranch)
    module input a_out[2]
Warning: multiple conflicting drivers for bug_eval.\a_out [1]:
    port out[1] of cell goodbranch_instance (goodbranch)
    module input a_out[1]
Warning: multiple conflicting drivers for bug_eval.\a_out [0]:
    port out[0] of cell goodbranch_instance (goodbranch)
    module input a_out[0]
Warning: multiple conflicting drivers for bug_eval.\b_out [4]:
    port out[4] of cell badbranch_instance (badbranch)
    module input b_out[4]
Warning: multiple conflicting drivers for bug_eval.\b_out [3]:
    port out[3] of cell badbranch_instance (badbranch)
    module input b_out[3]
Warning: multiple conflicting drivers for bug_eval.\b_out [2]:
    port out[2] of cell badbranch_instance (badbranch)
    module input b_out[2]
Warning: multiple conflicting drivers for bug_eval.\b_out [1]:
    port out[1] of cell badbranch_instance (badbranch)
    module input b_out[1]
Warning: multiple conflicting drivers for bug_eval.\b_out [0]:
    port out[0] of cell badbranch_instance (badbranch)
    module input b_out[0]
Checking module goodbranch...
Checking module proofcombgood...
Checking module top_1...
Checking module topmsb_1...
Found and reported 12 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 0 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \badbranch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bug_eval..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \goodbranch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \proofcombgood..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$35: \first_cycle -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \top_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \topmsb_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \badbranch.
  Optimizing cells in module \bug_eval.
  Optimizing cells in module \goodbranch.
  Optimizing cells in module \proofcombgood.
  Optimizing cells in module \proofcombgood.
  Optimizing cells in module \top_1.
  Optimizing cells in module \topmsb_1.
Performed a total of 1 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 0 cells.

3.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

3.7.8. Rerunning OPT passes. (Maybe there is more to do..)

3.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \badbranch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bug_eval..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \goodbranch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \proofcombgood..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \topmsb_1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \badbranch.
  Optimizing cells in module \bug_eval.
  Optimizing cells in module \goodbranch.
  Optimizing cells in module \proofcombgood.
  Optimizing cells in module \top_1.
  Optimizing cells in module \topmsb_1.
Performed a total of 0 changes.

3.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 0 cells.

3.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..

3.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

3.7.14. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..

3.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module badbranch.
Optimizing module bug_eval.
Optimizing module goodbranch.
Optimizing module proofcombgood.
Optimizing module top_1.
Optimizing module topmsb_1.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\badbranch'.
Finding identical cells in module `\bug_eval'.
Finding identical cells in module `\goodbranch'.
Finding identical cells in module `\proofcombgood'.
Finding identical cells in module `\top_1'.
Finding identical cells in module `\topmsb_1'.
Removed a total of 0 cells.

3.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \badbranch..
Finding unused cells or wires in module \bug_eval..
Finding unused cells or wires in module \goodbranch..
Finding unused cells or wires in module \proofcombgood..
Finding unused cells or wires in module \top_1..
Finding unused cells or wires in module \topmsb_1..

3.11.4. Finished fast OPT passes.

3.12. Printing statistics.

=== badbranch ===

   Number of wires:                  3
   Number of wire bits:             13
   Number of public wires:           3
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== bug_eval ===

   Number of wires:                 16
   Number of wire bits:             42
   Number of public wires:          14
   Number of public wire bits:      40
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $logic_and                      1
     $mux                            1
     $not                            1
     badbranch                       1
     goodbranch                      1
     top_1                           1
     topmsb_1                        1

=== goodbranch ===

   Number of wires:                  3
   Number of wire bits:             13
   Number of public wires:           3
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== proofcombgood ===

   Number of wires:                 19
   Number of wire bits:             39
   Number of public wires:           9
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $adff                           3
     $assert                         1
     $eq                             3
     $logic_and                      1
     $mux                            4
     bug_eval                        1
     goodbranch                      1

=== top_1 ===

   Number of wires:                  3
   Number of wire bits:              5
   Number of public wires:           2
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $not                            1
     $or                             1

=== topmsb_1 ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dff                            1

=== design hierarchy ===

   proofcombgood                     1
     bug_eval                        1
       badbranch                     1
       goodbranch                    1
       top_1                         1
       topmsb_1                      1
     goodbranch                      1

   Number of wires:                 50
   Number of wire bits:            128
   Number of public wires:          37
   Number of public wire bits:     115
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $add                            3
     $adff                           3
     $assert                         1
     $dff                            1
     $eq                             3
     $logic_and                      2
     $mux                            5
     $not                            2
     $or                             1

3.13. Executing CHECK pass (checking for obvious problems).
Checking module badbranch...
Checking module bug_eval...
Warning: Drivers conflicting with a constant 1'0 driver:
    module input a_num1[1]
    module input a_num1[2]
    module input a_num1[3]
    module input a_num2[0]
    module input a_num2[2]
    module input a_num2[3]
    module input b_num1[0]
    module input b_num1[1]
    module input b_num1[3]
    module input b_num2[0]
    module input b_num2[1]
    module input b_num2[2]
Warning: Drivers conflicting with a constant 1'1 driver:
    module input a_num1[0]
    module input a_num2[1]
    module input b_num1[2]
    module input b_num2[3]
Warning: multiple conflicting drivers for bug_eval.\a_out [4]:
    port out[4] of cell goodbranch_instance (goodbranch)
    module input a_out[4]
Warning: multiple conflicting drivers for bug_eval.\a_out [3]:
    port out[3] of cell goodbranch_instance (goodbranch)
    module input a_out[3]
Warning: multiple conflicting drivers for bug_eval.\a_out [2]:
    port out[2] of cell goodbranch_instance (goodbranch)
    module input a_out[2]
Warning: multiple conflicting drivers for bug_eval.\a_out [1]:
    port out[1] of cell goodbranch_instance (goodbranch)
    module input a_out[1]
Warning: multiple conflicting drivers for bug_eval.\a_out [0]:
    port out[0] of cell goodbranch_instance (goodbranch)
    module input a_out[0]
Warning: multiple conflicting drivers for bug_eval.\b_out [4]:
    port out[4] of cell badbranch_instance (badbranch)
    module input b_out[4]
Warning: multiple conflicting drivers for bug_eval.\b_out [3]:
    port out[3] of cell badbranch_instance (badbranch)
    module input b_out[3]
Warning: multiple conflicting drivers for bug_eval.\b_out [2]:
    port out[2] of cell badbranch_instance (badbranch)
    module input b_out[2]
Warning: multiple conflicting drivers for bug_eval.\b_out [1]:
    port out[1] of cell badbranch_instance (badbranch)
    module input b_out[1]
Warning: multiple conflicting drivers for bug_eval.\b_out [0]:
    port out[0] of cell badbranch_instance (badbranch)
    module input b_out[0]
Checking module goodbranch...
Checking module proofcombgood...
Checking module top_1...
Checking module topmsb_1...
Found and reported 12 problems.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \proofcombgood
Used module:     \bug_eval
Used module:         \badbranch
Used module:         \top_1
Used module:         \topmsb_1
Used module:         \goodbranch

4.2. Analyzing design hierarchy..
Top module:  \proofcombgood
Used module:     \bug_eval
Used module:         \badbranch
Used module:         \top_1
Used module:         \topmsb_1
Used module:         \goodbranch
Removed 0 unused modules.
Module proofcombgood directly or indirectly contains formal properties -> setting "keep" attribute.

5. Executing jny backend.

6. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 12 unique messages, 24 total
End of script. Logfile hash: 028a608d19, CPU: user 0.02s system 0.01s, MEM: 11.86 MB peak
Yosys 0.36+3 (git sha1 a53032104, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 21% 4x opt_merge (0 sec), 21% 6x opt_expr (0 sec), ...
