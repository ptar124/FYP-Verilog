/* Generated by Yosys 0.36+3 (git sha1 a53032104, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module badbranch(num1, num2, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  input [3:0] num1;
  wire [3:0] num1;
  input [3:0] num2;
  wire [3:0] num2;
  output [4:0] out;
  wire [4:0] out;
  assign out[0] = num1[0] ^ num2[0];
  assign _00_ = num1[1] ^ num2[1];
  assign _01_ = ~(num1[0] & num2[0]);
  assign out[1] = ~(_01_ ^ _00_);
  assign _02_ = ~(num1[2] ^ num2[2]);
  assign _03_ = ~(num1[1] & num2[1]);
  assign _04_ = _00_ & ~(_01_);
  assign _05_ = _04_ | ~(_03_);
  assign out[2] = ~(_05_ ^ _02_);
  assign _06_ = ~(num1[3] ^ num2[3]);
  assign _07_ = ~(num1[2] & num2[2]);
  assign _08_ = _05_ & ~(_02_);
  assign _09_ = _07_ & ~(_08_);
  assign out[3] = _09_ ^ _06_;
  assign _10_ = num1[3] & num2[3];
  assign _11_ = ~(_07_ | _06_);
  assign _12_ = _11_ | _10_;
  assign _13_ = _06_ | _02_;
  assign _14_ = _05_ & ~(_13_);
  assign out[4] = _14_ | _12_;
endmodule

module bug_eval(clk, rst, a_num1, a_num2, a_out, b_num1, b_num2, b_out, result);
  wire _0_;
  input [3:0] a_num1;
  wire [3:0] a_num1;
  input [3:0] a_num2;
  wire [3:0] a_num2;
  input [4:0] a_out;
  wire [4:0] a_out;
  input [3:0] b_num1;
  wire [3:0] b_num1;
  input [3:0] b_num2;
  wire [3:0] b_num2;
  input [4:0] b_out;
  wire [4:0] b_out;
  input clk;
  wire clk;
  wire [2:0] in_shiftandmult;
  output [4:0] result;
  wire [4:0] result;
  input rst;
  wire rst;
  wire w_msb;
  wire y1;
  wire y_msb;
  wire y_viv1;
  assign _0_ = y_msb | ~(y1);
  assign result[0] = _0_ ? b_out[0] : a_out[0];
  assign result[1] = _0_ ? b_out[1] : a_out[1];
  assign result[2] = _0_ ? b_out[2] : a_out[2];
  assign result[3] = _0_ ? b_out[3] : a_out[3];
  assign result[4] = _0_ ? b_out[4] : a_out[4];
  badbranch badbranch_instance (
    .num1(4'h4),
    .num2(4'h8),
    .out(b_out)
  );
  top_1 eval_top_1 (
    .w(3'h4),
    .y(y1)
  );
  topmsb_1 eval_topmsb_1 (
    .clk(clk),
    .w(1'h0),
    .y(y_msb)
  );
  goodbranch goodbranch_instance (
    .num1(4'h1),
    .num2(4'h2),
    .out(a_out)
  );
  assign a_num1 = 4'h1;
  assign a_num2 = 4'h2;
  assign b_num1 = 4'h4;
  assign b_num2 = 4'h8;
  assign in_shiftandmult = 3'h4;
  assign w_msb = 1'h0;
  assign y_viv1 = 1'h1;
endmodule

module goodbranch(num1, num2, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  input [3:0] num1;
  wire [3:0] num1;
  input [3:0] num2;
  wire [3:0] num2;
  output [4:0] out;
  wire [4:0] out;
  assign _00_ = num1[1] ^ num2[1];
  assign _01_ = ~(num1[0] & num2[0]);
  assign out[1] = ~(_01_ ^ _00_);
  assign _02_ = ~(num1[2] ^ num2[2]);
  assign _03_ = ~(num1[1] & num2[1]);
  assign _04_ = _00_ & ~(_01_);
  assign _05_ = _04_ | ~(_03_);
  assign out[2] = ~(_05_ ^ _02_);
  assign _06_ = ~(num1[3] ^ num2[3]);
  assign _07_ = ~(num1[2] & num2[2]);
  assign _08_ = _05_ & ~(_02_);
  assign _09_ = _07_ & ~(_08_);
  assign out[3] = _09_ ^ _06_;
  assign out[0] = num1[0] ^ num2[0];
  assign _10_ = num1[3] & num2[3];
  assign _11_ = ~(_07_ | _06_);
  assign _12_ = _11_ | _10_;
  assign _13_ = _06_ | _02_;
  assign _14_ = _05_ & ~(_13_);
  assign out[4] = _14_ | _12_;
endmodule

module top_1(y, w);
  input [2:0] w;
  wire [2:0] w;
  output y;
  wire y;
  assign y = ~(w[0] | w[1]);
endmodule

module topmsb_1(y, clk, w);
  input clk;
  wire clk;
  wire [1:0] i;
  input w;
  wire w;
  output y;
  reg y = 1'h0;
  always @(posedge clk)
    y <= 1'h1;
  assign i = 2'h0;
endmodule
